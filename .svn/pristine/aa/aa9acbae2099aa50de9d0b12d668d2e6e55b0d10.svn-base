//
//  SidraAlbumView.m
//  Pulse
//
//  Created by xibic on 6/25/14.
//  Copyright (c) 2014 Atomix. All rights reserved.
//

#import "SidraAlbumView.h"


#define ALBUM_SIZE CGSizeMake(155,145)
#define PHOTO_SIZE CGSizeMake(145,130)
#define PADDING 3

@interface SidraAlbumView()<UIScrollViewDelegate,UIGestureRecognizerDelegate>{
    UIScrollView *albumScrollView;
    BOOL isLoading;
    NSArray *albumItemArray;
}

@end

@implementation SidraAlbumView

@synthesize delegate;

- (id)initWithFrame:(CGRect)frame
{
    self = [super initWithFrame:frame];
    if (self) {
        // Initialization code
        self.backgroundColor = [UIColor clearColor];
        self.userInteractionEnabled = YES;
        
    }
    return self;
}

- (void)addAlbumViews:(NSArray *)itemArray{
    
    albumItemArray = itemArray;
    
    [albumScrollView removeFromSuperview];
    albumScrollView = nil;
    
    albumScrollView = [[UIScrollView alloc] initWithFrame:CGRectMake(0, 0, self.frame.size.width, self.frame.size.height)];
    albumScrollView.backgroundColor = [UIColor clearColor];
    albumScrollView.showsHorizontalScrollIndicator = NO;
    albumScrollView.showsVerticalScrollIndicator = NO;
    albumScrollView.pagingEnabled = NO;
    albumScrollView.delegate = self;
    albumScrollView.bounces = YES;
    albumScrollView.userInteractionEnabled = YES;
    
    int numberOfRows = ceilf([albumItemArray count]*1.0f / 2.0f);
    int numberOfCols = 2;
    int index=0;
    int posY = 0;
    for (int i=0; i<numberOfRows; i++) {
        int posX = PADDING;
        for (int j=0; j<numberOfCols && index <[albumItemArray count]; j++) {
            
            AlbumItem *item = (AlbumItem*)[albumItemArray objectAtIndex:index];
            
            UIView *view = [[UIView alloc] initWithFrame:CGRectMake(posX, posY, ALBUM_SIZE.width, ALBUM_SIZE.height)];
            posX += ALBUM_SIZE.width+PADDING;
            
            view.tag = index;
            view.userInteractionEnabled = YES;
            view.backgroundColor = [UIColor clearColor];

            UIImageView *imageFrameView = [[UIImageView alloc] initWithFrame:CGRectMake(0, 0, ALBUM_SIZE.width, ALBUM_SIZE.height)];
            imageFrameView.image = [UIImage imageNamed:@"gallery_album_frame.png"];
            [imageFrameView setContentMode:UIViewContentModeRedraw];
            [view addSubview:imageFrameView];
            
            AsyncImageView *imageView = [[AsyncImageView alloc] initWithFrame:CGRectMake(5, 5, PHOTO_SIZE.width, PHOTO_SIZE.height)];
            imageView.showActivityIndicator = YES;
            imageView.autoresizingMask = ( UIViewAutoresizingFlexibleWidth | UIViewAutoresizingFlexibleHeight | UIViewAutoresizingFlexibleLeftMargin | UIViewAutoresizingFlexibleRightMargin);
            imageView.contentMode = UIViewContentModeScaleAspectFill;
            imageView.clipsToBounds = YES;
            
            imageView.imageURL = [NSURL URLWithString:[[NSString stringWithFormat:@"%@/%@",SERVER_BASE_IMAGE_URL,item.thumb] stringByAddingPercentEscapesUsingEncoding:NSUTF8StringEncoding]];
            [view addSubview:imageView];
            imageView.userInteractionEnabled = YES;
            
            UIImageView *imageShadeView = [[UIImageView alloc] initWithFrame:CGRectMake(5, 5, PHOTO_SIZE.width, PHOTO_SIZE.height)];
            imageShadeView.image = [UIImage imageNamed:@"image_shade.png"];
            [imageShadeView setContentMode:UIViewContentModeRedraw];
            [view addSubview:imageShadeView];

            
            UILabel *titleLabel = [[UILabel alloc] initWithFrame:CGRectMake(10, view.frame.size.height - 40.0f, view.frame.size.width -5, 10.0f)];
            titleLabel.font = [UIFont systemFontOfSize:12.0f];
            titleLabel.textColor = [UIColor whiteColor];
            titleLabel.textAlignment = NSTextAlignmentLeft;
            titleLabel.text = item.catName;
            [view addSubview:titleLabel];
            
            UILabel *numberOfPhotosVideosLabel = [[UILabel alloc] initWithFrame:CGRectMake(10, view.frame.size.height - 25.0f, view.frame.size.width -5, 10.0f)];
            numberOfPhotosVideosLabel.font = [UIFont systemFontOfSize:9.0f];
            numberOfPhotosVideosLabel.textColor = [UIColor whiteColor];
            numberOfPhotosVideosLabel.textAlignment = NSTextAlignmentLeft;
            numberOfPhotosVideosLabel.text = [NSString stringWithFormat:@"%d Photos, %d Videos",item.photos,item.videos];
            [view addSubview:numberOfPhotosVideosLabel];
            
            UITapGestureRecognizer *singleTap = [[UITapGestureRecognizer alloc] initWithTarget:self action:@selector(handleSingleTap:)];
            UITapGestureRecognizer *doubleTap = [[UITapGestureRecognizer alloc] initWithTarget:self action:@selector(handleDoubleTap:)];
            UITapGestureRecognizer *twoFingerTap = [[UITapGestureRecognizer alloc] initWithTarget:self action:@selector(handleTwoFingerTap:)];
            
            [singleTap setNumberOfTapsRequired:1];
            [singleTap requireGestureRecognizerToFail:doubleTap];
            
            [doubleTap setNumberOfTapsRequired:2];
            [twoFingerTap setNumberOfTouchesRequired:2];
            
            [view addGestureRecognizer:singleTap];
            
            [albumScrollView addSubview:view];
            
            index++;
        }
        
        posY += ALBUM_SIZE.height + PADDING;
        
        albumScrollView.contentSize = CGSizeMake(albumScrollView.contentSize.width, posY + PADDING+ALBUM_SIZE.height);
        
    }
    
    
    [self addSubview:albumScrollView];
    
}

/*
// Only override drawRect: if you perform custom drawing.
// An empty implementation adversely affects performance during animation.
- (void)drawRect:(CGRect)rect
{
    // Drawing code
}
*/
- (void)scrollViewDidEndDecelerating:(UIScrollView *)scrollView
{
    float endScrolling = scrollView.contentOffset.y + scrollView.frame.size.height;
    if (endScrolling >= scrollView.contentSize.height){
        if (!isLoading) {
            
        }
    }
    if (endScrolling == scrollView.frame.size.height){
        //NSLog(@"Scroll UP Called");
    }
}

#pragma mark Gesture Handling methods

- (void)handleSingleTap:(UIGestureRecognizer *)gestureRecognizer {
    UIView *view = (UIView*)[gestureRecognizer view];
    //[self.xibImageDelegate imageClicked:imageName];
    AlbumItem *item = (AlbumItem*)[albumItemArray objectAtIndex:view.tag];
    [self.delegate clickedAlbum:item];
}

-(void)handleSwipeLeft:(id)sender{
}

-(void)handleSwipeRight:(id)sender{
    //[self.xibImageDelegate xibImageViewswipeRightAction];
}

- (void)handleDoubleTap:(UIGestureRecognizer *)gestureRecognizer {
    
}

- (void)handleTwoFingerTap:(UIGestureRecognizer *)gestureRecognizer {
    
}

-(void)handlePan:(UIPanGestureRecognizer *)recognizer{
    
}

#pragma mark - GestureRecognizer Delegate
- (BOOL)gestureRecognizer:(UIGestureRecognizer *)gestureRecognizer shouldRecognizeSimultaneouslyWithGestureRecognizer:(UIGestureRecognizer *)otherGestureRecognizer {
    return YES;
}

@end
