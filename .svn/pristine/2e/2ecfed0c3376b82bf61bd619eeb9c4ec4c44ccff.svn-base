//
//  UserPostView.m
//  CommonPostView
//
//  Created by Atomix on 8/1/14.
//  Copyright (c) 2014 Atomix. All rights reserved.
//

#import "ForumPostView.h"
#import "XIBPhotoPicker.h"
#import <CoreText/CoreText.h>
#import <MobileCoreServices/MobileCoreServices.h>
#import "FUploadImageView.h"

#define TEXTVIEW_TEXT @""
#define KEYBOARD_HEIGHT 216

@interface ForumPostView()<XIBPhotoPickerDelegate,FUploadImageViewDelegate,UIGestureRecognizerDelegate>{
    XIBPhotoPicker *photoPicker;
    FUploadImageView *uploadImageView;
    NSString *photoNameGotFromServer;
}

@end

@implementation ForumPostView {
    
    UIView *borderBG;
    
    UILabel *calculateCharacterRange;
    int textLimit;
    UIButton *sendBtn;
    UIButton *cameraBtn;
    
    UIImageView *postImg;
    UIButton *postImgCancelBtn;
    UIButton *CommentCancelBtn;
    
    UIImageView *defaultKeyboard;
    BOOL isImageTake;
    
    UIView *hudView;
    BOOL freezingSendBtn;
    
}

@synthesize postID;
@synthesize hashTag;
@synthesize inputField;

- (id)initWithFrame:(CGRect)frame forPostView:(BOOL)isTrue withHashTag:(NSString*)hashtag
{
    self = [super initWithFrame:frame];
    if (self) {
        // Initialization code
        self.hashTag = hashtag;
        [hudView removeFromSuperview];
        hudView = nil;
        hudView = [[UIView alloc] initWithFrame:CGRectMake(0, -66, SCREEN_SIZE.width, SCREEN_SIZE.height+100)];
        hudView.userInteractionEnabled = YES;
        hudView.backgroundColor = [UIColor blackColor];
        hudView.alpha = 0.3f;
        [self addSubview:hudView];
        
        UITapGestureRecognizer *singleTap = [[UITapGestureRecognizer alloc] initWithTarget:self action:@selector(handleSingleTap:)];
        [singleTap setNumberOfTapsRequired:1];
        [hudView addGestureRecognizer:singleTap];
        
        [self designSection:isTrue];
       
    }
    return self;
}

#pragma mark Gesture Handling methods
- (void)handleSingleTap:(UIGestureRecognizer *)gestureRecognizer {
    //NSLog(@"%hhd", [self.inputField isFirstResponder]);
    if (![self.inputField isFirstResponder]) {
        [self.inputField becomeFirstResponder];
    }
}

#pragma mark - GestureRecognizer Delegate
- (BOOL)gestureRecognizer:(UIGestureRecognizer *)gestureRecognizer shouldRecognizeSimultaneouslyWithGestureRecognizer:(UIGestureRecognizer *)otherGestureRecognizer {
    return YES;
}

/*
// Only override drawRect: if you perform custom drawing.
// An empty implementation adversely affects performance during animation.
- (void)drawRect:(CGRect)rect
{
    // Drawing code
}
*/

-(void)designSection :(BOOL)visible{
    
    // initialze image take
    
    isImageTake = NO;
    
    // input text limit
    textLimit = 250;
    
    freezingSendBtn = NO;
    
    // white background
    borderBG = [[UIView alloc]initWithFrame:CGRectMake(5, 70, [UIScreen mainScreen].bounds.size.width - 10, [UIScreen mainScreen].bounds.size.height - KEYBOARD_HEIGHT - 70)];
    borderBG.backgroundColor = [UIColor whiteColor];
    [self addSubview:borderBG];
    // border Layer
    [borderBG.layer setBorderColor:[[[UIColor lightGrayColor] colorWithAlphaComponent:1.0] CGColor]];
    [borderBG.layer setBorderWidth:0.5];
    [borderBG.layer setCornerRadius:3.0];
    borderBG.clipsToBounds = YES;
    
    
    // text View
    
    if ([UIScreen mainScreen].bounds.size.height == 480.0) {
        self.inputField = [[UITextView alloc]initWithFrame:CGRectMake(20, 15, 270, 83)];
    }
    else {
        self.inputField = [[UITextView alloc]initWithFrame:CGRectMake(20, 15, 270, 138)];
    }
    
    self.inputField.backgroundColor = [UIColor whiteColor];
    self.inputField.autocapitalizationType = UITextAutocapitalizationTypeNone;
    self.inputField.autocorrectionType = UITextAutocorrectionTypeNo;
    self.inputField.delegate = self;
    [self.inputField becomeFirstResponder];
    //self.inputField.allowsEditingTextAttributes = YES;
    self.inputField.editable = YES;
    [borderBG addSubview:self.inputField];
    
    if (![self.hashTag isEqualToString:@""] && self.hashTag != NULL) {
        self.hashTag = [NSString stringWithFormat:@"#%@\n",self.hashTag];
//        self.inputField.text = [NSString stringWithFormat:@"#%@\n",self.hashTag];
//        textLimit -= self.hashTag.length+1;
//        [self colorHashtag];
        
        UILabel *hashTagLabel = [[UILabel alloc] initWithFrame:CGRectMake(0, 2, self.inputField.frame.size.width, 20)];
        hashTagLabel.textAlignment = NSTextAlignmentLeft;
        hashTagLabel.font = [UIFont boldSystemFontOfSize:14.0f];
        hashTagLabel.textColor = [UIColor colorWithRed:52.0/255.0 green:120.0/255.0 blue:194.0/255.0 alpha:1.0];
        [borderBG addSubview:hashTagLabel];
        hashTagLabel.text = [NSString stringWithFormat:@"  #%@\n",self.hashTag];
        textLimit -= self.hashTag.length+1;
        
    }
    
    calculateCharacterRange = [[UILabel alloc]initWithFrame:CGRectMake(220, borderBG.frame.size.height - 45, 25, 40)];
    calculateCharacterRange.text = [NSString stringWithFormat:@"%d",textLimit];
    calculateCharacterRange.font = [UIFont systemFontOfSize:13];
    calculateCharacterRange.textAlignment = NSTextAlignmentCenter;
    calculateCharacterRange.textColor = [UIColor lightGrayColor];
    [calculateCharacterRange sizeToFit];
    // calculateCharacterRange.backgroundColor = [UIColor lightGrayColor];
    [borderBG addSubview: calculateCharacterRange];
    
    //Send Button
    
    sendBtn = [UIButton buttonWithType:UIButtonTypeRoundedRect];
    sendBtn.frame = CGRectMake(calculateCharacterRange.frame.origin.x + calculateCharacterRange.frame.size.width + 5, borderBG.frame.size.height - 45, 50, 40);
    [sendBtn setTitle:@"SEND" forState:UIControlStateNormal];
    sendBtn.enabled = NO;
    [sendBtn addTarget:self action:@selector(sendBtnAction:) forControlEvents:UIControlEventTouchUpInside];
    [borderBG addSubview:sendBtn];
    
    // border Layer
    [sendBtn.layer setBorderColor:[[[UIColor lightGrayColor] colorWithAlphaComponent:1.0] CGColor]];
    [sendBtn.layer setBorderWidth:0.5];
    [sendBtn.layer setCornerRadius:6.0];
    sendBtn.clipsToBounds = YES;
    
    
    //Camera Button
    
    UIView *cameraBgBorder = [[UIView alloc]initWithFrame:CGRectMake(borderBG.frame.origin.x + 4, borderBG.frame.size.height - 45, 45, 40)];
    [borderBG addSubview:cameraBgBorder];
    
    // border Layer
    [cameraBgBorder.layer setBorderColor:[[[UIColor lightGrayColor] colorWithAlphaComponent:1.0] CGColor]];
    [cameraBgBorder.layer setBorderWidth:0.5];
    [cameraBgBorder.layer setCornerRadius:6.0];
    cameraBgBorder.clipsToBounds = YES;
    
    cameraBtn = [UIButton buttonWithType:UIButtonTypeCustom];
    cameraBtn.frame = CGRectMake(7.0, 8.0, 30, 25);
    [cameraBtn setImage:[UIImage imageNamed:@"cameraBtn"] forState:UIControlStateNormal];
    [cameraBtn addTarget:self action:@selector(cameraBtnAction:) forControlEvents:UIControlEventTouchUpInside];
    [cameraBgBorder addSubview:cameraBtn];
    
    
    
    // Label Attachment Limit/one Photo URL
    UILabel *attachmentLimit = [[UILabel alloc] initWithFrame:CGRectMake(80, borderBG.frame.size.height - 43, 100, 20)];
    attachmentLimit.textAlignment = NSTextAlignmentCenter;
    attachmentLimit.font = [UIFont systemFontOfSize:10];
    [borderBG addSubview:attachmentLimit];
    
    NSMutableAttributedString *attString = [[NSMutableAttributedString alloc] initWithString:@"Attachment Limit:"];
    [attString addAttribute:(NSString*)kCTUnderlineStyleAttributeName
                      value:[NSNumber numberWithInt:kCTUnderlineStyleSingle]
                      range:(NSRange){0,[attString length]}];
    attachmentLimit.attributedText = attString;
    attachmentLimit.textColor = [UIColor lightGrayColor];
    
    
    UILabel *onePhoto = [[UILabel alloc] initWithFrame:CGRectMake(attachmentLimit.frame.origin.x, attachmentLimit.frame.origin.y + 12, attachmentLimit.frame.size.width, attachmentLimit.frame.size.height)];
    onePhoto.text = @"One photo/URL";
    onePhoto.font = [UIFont systemFontOfSize:10];
    onePhoto.textAlignment = NSTextAlignmentCenter;
    onePhoto.textColor = [UIColor lightGrayColor];
    [borderBG addSubview:onePhoto];
    
    // ...........................
    
    UILabel *dotDot = [[UILabel alloc] initWithFrame:CGRectMake(borderBG.frame.origin.x, borderBG.frame.size.height - 60, 300, 10)];
    dotDot.text = @"..................................................................";
    dotDot.textAlignment = NSTextAlignmentLeft;
    dotDot.textColor = [UIColor lightGrayColor];
    [borderBG addSubview:dotDot];
    
    // Post Image
    
    postImg = [[UIImageView alloc]init];
    
    if ([UIScreen mainScreen].bounds.size.height == 480.0){
        postImg.frame = CGRectMake(borderBG.frame.origin.x + 5.0, dotDot.frame.origin.y+35, 55, 40);
    }
    else {
        postImg.frame = CGRectMake(borderBG.frame.origin.x + 5.0, dotDot.frame.origin.y+15, 80, 60);
    }
    
    postImg.image = nil;
    //[borderBG addSubview:postImg];
    // border Layer
    [postImg.layer setBorderColor:[[[UIColor clearColor] colorWithAlphaComponent:0.0] CGColor]];
    [postImg.layer setBorderWidth:0.5];
    [postImg.layer setCornerRadius:6.0];
    postImg.clipsToBounds = YES;
    
    
    // Post Img cancel Button
    postImgCancelBtn = [UIButton buttonWithType:UIButtonTypeCustom];
    postImgCancelBtn.frame = CGRectMake(postImg.frame.origin.x + postImg.frame.size.width - 18, postImg.frame.origin.y + 2, 15, 15);
    [postImgCancelBtn setImage:[UIImage imageNamed:@"cancel"] forState:UIControlStateNormal];
    [postImgCancelBtn addTarget:self action:@selector(postImgCancelBtnAction:) forControlEvents:UIControlEventTouchUpInside];
    postImgCancelBtn.hidden = YES;
    [borderBG addSubview:postImgCancelBtn];
    
    
    // Comment Cancel button
    CommentCancelBtn = [UIButton buttonWithType:UIButtonTypeCustom];
    CommentCancelBtn.frame = CGRectMake(borderBG.frame.origin.x + borderBG.frame.size.width - 31, 4, 20, 20);
    [CommentCancelBtn setImage:[UIImage imageNamed:@"cancel"] forState:UIControlStateNormal];
    [CommentCancelBtn addTarget:self action:@selector(commentCancelBtnAction:) forControlEvents:UIControlEventTouchUpInside];
    CommentCancelBtn.hidden = visible;
    [borderBG addSubview:CommentCancelBtn];
    
    
    //DEFAULT iphone Photo
    
    defaultKeyboard = [[UIImageView alloc] init];
    defaultKeyboard.frame = CGRectMake(0, [UIScreen mainScreen].bounds.size.height - 216 - 60 - 3, 320, 216);
    defaultKeyboard.image = [UIImage imageNamed:@"iphoneKeyboard"];
    defaultKeyboard.hidden = YES;
    [self addSubview:defaultKeyboard];

}


-(void)callPostApi:(NSString *)descriptionText with:(NSMutableArray *)tagArray with:(NSArray *)photoArray{
    
    defaultKeyboard.hidden = NO;
    
    if ([self.postID isEqualToString:@""]) {
        [[ServerManager sharedManager] addForumThread:descriptionText tags:tagArray photo:(photoArray!=nil && [photoArray count]>0)?photoArray:nil completion:^(BOOL success){

            if (success) {
                defaultKeyboard.hidden = YES;
                CGRect frame = CGRectMake([UIScreen mainScreen].bounds.size.width/10.0, [UIScreen mainScreen].bounds.size.height/6.0 , 200, 50);
                NSString *msg = @"￼Posted Successfully to the Sidra Forum";
                AlertPopView *alertMsg = [[AlertPopView alloc] initWithFrame:frame alertMsg:msg];
                [self addSubview:alertMsg];
                alertMsg = nil;
                
                [self.delegate sendBtnValue:self.inputField.text commentItem:nil];
            }
            else{
                
                dispatch_async(dispatch_get_main_queue(), ^{
                    [[[UIAlertView alloc] initWithTitle:@"Server Error, Please try again" message:@"" delegate:nil cancelButtonTitle:@"OK" otherButtonTitles:nil, nil] show];
                });
            }
        }];
    }else{
       
        [[ServerManager sharedManager] addForumComment:[NSString stringWithFormat:@"%@",self.postID] commentText:descriptionText photo:postImg.image!=nil?@[postImg.image]:nil completion:^(BOOL success,NSMutableArray *itemArray){
            
            if (success) {
                defaultKeyboard.hidden = YES;
                [self.delegate sendBtnValue:self.inputField.text commentItem:[itemArray objectAtIndex:0]];
            }
            else{
                dispatch_async(dispatch_get_main_queue(), ^{
                    [[[UIAlertView alloc] initWithTitle:@"Server Error, Please try again" message:@"" delegate:nil cancelButtonTitle:@"OK" otherButtonTitles:nil, nil] show];
                });
            }
        }];
    }
}

#pragma mark - BUTTON ACTION

-(void)sendBtnAction:(UIButton *)sender {
    
  //[self.delegate sendBtnValue:self.inputField.text image:postImg.image];
    NSMutableArray *hashTagArray = [[NSMutableArray alloc] init];
    NSString *str=[self.hashTag stringByAppendingString:self.inputField.text];
    //NSCharacterSet *charSet = [NSCharacterSet whitespaceCharacterSet];
    NSString *trimmedString = [str stringByTrimmingCharactersInSet:[NSCharacterSet  whitespaceAndNewlineCharacterSet]];//[str stringByTrimmingCharactersInSet:charSet];
    if ([trimmedString isEqualToString:@""]) {
        // it's empty or contains only white spaces
        
    }
    else{
    }
    
    NSArray *words = [trimmedString componentsSeparatedByString:@" "];
    for (NSString *word in words) {
        if ([word hasPrefix:@"#"]) {
            NSString *hashString = [word stringByReplacingOccurrencesOfString:@"#" withString:@""];
            [hashTagArray addObject:hashString];
        }
    }
    
    [self callPostApi:trimmedString with:hashTagArray with:(photoNameGotFromServer!=nil&& ![photoNameGotFromServer isEqualToString:@""])?[NSArray arrayWithObject:photoNameGotFromServer]:nil ];
    
}

-(void)cameraBtnAction:(UIButton *)sender {
    [self.inputField resignFirstResponder];
    photoPicker = nil;
    self.hidden = YES;
    photoPicker = [[XIBPhotoPicker alloc] initWithFrame:CGRectMake(0,00.0f, SCREEN_SIZE.width, SCREEN_SIZE.height)];
    photoPicker.numberOfPhotosAllowed = 1;
    photoPicker.shouldAutoPick = YES;
    photoPicker.delegate = self;
    photoPicker.clipsToBounds = NO;
    [[AppManager sharedManager] hideNavigationBar];
    //[self addSubview:photoPicker];
    
    freezingSendBtn = YES;
    
}

#pragma mark- XIBPhotoPickerDelegate
- (void)photoPickDone:(NSArray *)selectedPhotos{
    
    XLog(@"%@",selectedPhotos);
    
    
    [[AppManager sharedManager] showNavigationBar];
    [photoPicker removeFromSuperview];
    photoPicker = nil;
    self.hidden = NO;
    [self.inputField becomeFirstResponder];
    
    if ([selectedPhotos count]>0) {
        [selectedPhotos enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
            UIImage *image = (UIImage *)obj;
            postImg.image = image;
            [uploadImageView removeFromSuperview];
            uploadImageView = nil;
            photoNameGotFromServer = @"";
            uploadImageView = [[FUploadImageView alloc] initWithFrame:postImg.frame withImage:image];
            uploadImageView.delegate = self;
            [self addSubview:uploadImageView];
           
            sendBtn.enabled = NO;
        
        }];
    }
    else
        freezingSendBtn = NO;;
}
#pragma mark - FUPloadImageView delegate
- (void)clickedDeleteButton{
    [uploadImageView removeFromSuperview];
    uploadImageView = nil;
    postImg.image = nil;
    photoNameGotFromServer = @"";
    isImageTake = NO;
    if((self.inputField.text.length<=0)||self.inputField.text.length>250)
        sendBtn.enabled = NO;
    else
        sendBtn.enabled = YES;
    
    
    freezingSendBtn=NO;
    
}

- (void)recievedPhotoName:(NSString*)serverPhotoName withTag:(NSInteger)tagID{
    photoNameGotFromServer = serverPhotoName;
    sendBtn.enabled = YES;
    freezingSendBtn = NO;
    isImageTake = YES;
    
    if(self.inputField.text.length>250)
        sendBtn.enabled = NO;
    else{
        if([self.postID isEqualToString:@""]&& (self.inputField.text.length==0 ))
            sendBtn.enabled = NO;
        else
            sendBtn.enabled = YES;
    }
}

//END-Photo Picker//

-(void)postImgCancelBtnAction:(UIButton *)sender {
    
    //NSLog(@"Post Img cancel Action ");
    
    [postImg.layer setBorderColor:[[[UIColor clearColor] colorWithAlphaComponent:0.0] CGColor]]; // hide Img border
    postImgCancelBtn.hidden = YES;  // Invisible cancel button
    isImageTake = NO;
    postImg.image = nil;
    
    // check text have OR not
    if ([self.inputField.text length]==0) {
        sendBtn.enabled = NO;
    }
    
    
    
}

-(void)commentCancelBtnAction:(UIButton *)sender {
    
    //NSLog(@"Comment cancel Action ");
    
    [self.delegate cancelComment];
}

#pragma mark - TextView Delegate

- (BOOL) textViewShouldBeginEditing:(UITextView *)textView
{
    if ([textView.text isEqualToString:TEXTVIEW_TEXT]) {
        textView.text = @"";
        textView.textColor = [UIColor blackColor];
    }
    
    return YES;
}


//
//- (BOOL)textViewShouldEndEditing:(UITextView *)textView{
//    
//    NSString *string = [textView.text stringByReplacingOccurrencesOfString:@" " withString:@""];
//    if(string.length == 0){
//        textView.textColor = [UIColor sidraFlatLightGrayColor];
//        textView.text = TEXTVIEW_TEXT;
//    }
//    return NO;
//}


- (void)textViewDidChange:(UITextView *)textView{
   
    NSString * str2 = [textView.text stringByTrimmingCharactersInSet:[NSCharacterSet whitespaceCharacterSet]];
    NSString * str = [str2 stringByTrimmingCharactersInSet:[NSCharacterSet newlineCharacterSet]];
    
    int currentLimit = textLimit - (int)str.length;
    [calculateCharacterRange setText:[NSString stringWithFormat:@"%i", currentLimit]];
    
    if (!freezingSendBtn) {
        
        
        
        if(isImageTake){
            
            if([self.postID isEqualToString:@""]){
             sendBtn.enabled = NO;
                // Active Send button
                if (currentLimit > 0 && currentLimit < 250 ) {
                    sendBtn.enabled = YES;
                }
                else if (currentLimit > 250){
                    sendBtn.enabled = NO;
                }
                else sendBtn.enabled = NO;
            
            
            }
            
            else
            {
        sendBtn.enabled = YES;
            
            // Active Send button
            if (currentLimit >= 0 && currentLimit <= 250 ) {
                sendBtn.enabled = YES;
            }
            else if (currentLimit > 250){
                sendBtn.enabled = NO;
            }
            else sendBtn.enabled = NO;
            }
        
        }
        else
        {
         sendBtn.enabled = NO;
            // Active Send button
            if (currentLimit >= 0 && currentLimit < 250 ) {
                sendBtn.enabled = YES;
            }
            else {
                sendBtn.enabled = NO;
            }
        
        }
            
        
        
      
        
        // check limit
        if (currentLimit<50) {
            calculateCharacterRange.textColor = [UIColor redColor];
            [calculateCharacterRange sizeToFit];
        }
        else {
            calculateCharacterRange.textColor = [UIColor lightGrayColor];
            [calculateCharacterRange sizeToFit];
        }
        [self colorHashtag];
    }
    
}

//- (BOOL)textView:(UITextView *)textView shouldChangeTextInRange:(NSRange)range replacementText:(NSString *)text{
//    NSUInteger newLength = (textView.text.length - range.length) + text.length;
//    if(newLength <= textLimit){
//        if([text isEqualToString:@"\n"]) {
//            if(textView.text.length == 0){
//                textView.textColor = [UIColor blackColor];
//                textView.text = TEXTVIEW_TEXT;
//            }
//            return NO;
//        }
//        
//        return YES;
//    } else {
//        //[textView resignFirstResponder];
//        return NO;
//    }
//}

/*
-(void)colorWord{
    NSMutableAttributedString * string = [[NSMutableAttributedString alloc]initWithString:self.inputField.text];
    
    //NSString *str = self.inputField.text;
    NSError *error = nil;
    
    //I Use regex to detect the pattern I want to change color
    NSRegularExpression *regex = [NSRegularExpression regularExpressionWithPattern:@"#(\\w+)" options:0 error:&error];
    
    
    
    NSArray *matches = [regex matchesInString:self.inputField.text options:0 range:NSMakeRange(0, self.inputField.text.length)];
    
    for (NSTextCheckingResult *match in matches) {
        NSRange wordRange = [match rangeAtIndex:0];
        [string addAttribute:NSForegroundColorAttributeName value:[UIColor colorWithRed:52.0/255.0 green:120.0/255.0 blue:194.0/255.0 alpha:1.0] range:wordRange];
    }
    
    [self.inputField setAttributedText:string];
}
 */

- (void)colorHashtag{
    NSMutableAttributedString * string = [[NSMutableAttributedString alloc]initWithString:self.inputField.text];
    
    NSArray *words=[self.inputField.text componentsSeparatedByString:@" "];
    
    for (NSString *word in words) {
        if ([word hasPrefix:@"#"]) {
            NSRange range=[self.inputField.text rangeOfString:word];
            [string addAttribute:NSForegroundColorAttributeName
                           value:[UIColor colorWithRed:52.0/255.0 green:120.0/255.0 blue:194.0/255.0 alpha:1.0]//
                           range:range];
        }
    }
    [self.inputField setAttributedText:string];
}


#pragma mark - Action Sheet Delegate

- (void)actionSheet:(UIActionSheet *)actionSheet clickedButtonAtIndex:(NSInteger)buttonIndex {
    
    
    switch (buttonIndex) {
        case 0: // Camera
            
            [self useCamera];
            break;
            
        case 1: // Photo Album
            
            [self usePhotoAlbum];
            break;
            
        default:
            break;
    }
}


#pragma mark -
#pragma mark UIImagePickerControllerDelegate

-(void)imagePickerController:(UIImagePickerController *)picker
didFinishPickingMediaWithInfo:(NSDictionary *)info
{
    
    NSString *mediaType = info[UIImagePickerControllerMediaType];
    
  //  [self dismissViewControllerAnimated:YES completion:nil];
      [[AppManager sharedManager]dismissModelViewController];
    
   
    if ([mediaType isEqualToString:(NSString *)kUTTypeImage]) {
        UIImage *image = info[UIImagePickerControllerOriginalImage];
        
        
        [postImg.layer setBorderColor:[[[UIColor lightGrayColor] colorWithAlphaComponent:1.0] CGColor]]; // show Img border
        postImgCancelBtn.hidden = NO;  // visible cancel button
        if([self.postID isEqualToString:@""])
            isImageTake=NO;
        else
        isImageTake = YES; // image taken
        sendBtn.enabled = YES; // Active send btn
        [self.inputField becomeFirstResponder]; //show Keyboard
        postImg.image = image; // set Image
        
    }
    
}



-(void)imagePickerControllerDidCancel:(UIImagePickerController *)picker
{
    
 
  //  [self dismissViewControllerAnimated:YES completion:nil];
      [[AppManager sharedManager]dismissModelViewController];
       [self.inputField becomeFirstResponder]; //show Keyboard
}


- (void)usePhotoAlbum {
    
    //XLog(@"Use Photo Album");
    
    
    if ([UIImagePickerController isSourceTypeAvailable:
         UIImagePickerControllerSourceTypeSavedPhotosAlbum])
    {
        UIImagePickerController *imagePicker =
        [[UIImagePickerController alloc] init];
        imagePicker.delegate = self;
        imagePicker.sourceType =
        UIImagePickerControllerSourceTypePhotoLibrary;
        imagePicker.mediaTypes = @[(NSString *) kUTTypeImage];
        imagePicker.allowsEditing = NO;
    //    [self presentViewController:imagePicker
    //                       animated:YES completion:nil];
        
     [[AppManager sharedManager ] presentModelViewController:imagePicker];
        
    }
    
}

-(void)useCamera {
    
    
    if ([UIImagePickerController isSourceTypeAvailable:
         UIImagePickerControllerSourceTypeCamera]){
        UIImagePickerController *imagePicker = [[UIImagePickerController alloc] init];
        imagePicker.delegate = self;
        imagePicker.sourceType =
        UIImagePickerControllerSourceTypeCamera;
        imagePicker.mediaTypes = @[(NSString *) kUTTypeImage];
        imagePicker.allowsEditing = YES;
        [[AppManager sharedManager ] presentModelViewController:imagePicker];
    }
    
}

- (void) touchesBegan:(NSSet *)touches withEvent:(UIEvent *)event {
    
    
}

@end
