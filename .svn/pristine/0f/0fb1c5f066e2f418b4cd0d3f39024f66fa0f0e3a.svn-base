//
//  FullScreenPhotoViewer.m
//  Pulse
//
//  Created by xibic on 6/27/14.
//  Copyright (c) 2014 Atomix. All rights reserved.
//

#import "FullScreenPhotoViewer.h"
#import "MediaItem.h"

@interface FullScreenPhotoViewer()<UIGestureRecognizerDelegate,UIScrollViewDelegate>{
    NSArray *photosArray;
    int selectedIndex;
    UIScrollView *scrollView;
    UIView *barView;
    BOOL barViewShowing;
    BOOL shouldLoadOnlyURL;
}

@end

@implementation FullScreenPhotoViewer

@synthesize delegate;

- (id)initWithFrame:(CGRect)frame photosArray:(NSArray*)array withSelectedIndex:(int)sindex isGallery:(BOOL)isGallery{
    self = [super initWithFrame:frame];
    if (self) {
        // Initialization code
        
        self.userInteractionEnabled = YES;
        self.backgroundColor = [UIColor blackColor];
        photosArray = array;
        selectedIndex = sindex;
        shouldLoadOnlyURL = !isGallery;
        
        [self addGestureRecognizer];
        [self addScrollView];
        [self addCloseBar];
        /*
         [[UIDevice currentDevice] beginGeneratingDeviceOrientationNotifications];
         [[NSNotificationCenter defaultCenter] addObserver: self selector:
         @selector(deviceOrientationDidChange:) name: UIDeviceOrientationDidChangeNotification object: nil];
         */
    }
    return self;
}

#pragma initialization for previewclassifed
- (id)initWithFrameForPreviewClassified:(CGRect)frame photosArray:(NSArray*)array withSelectedIndex:(int)sindex isGallery:(BOOL)isGallery{
    self = [super initWithFrame:frame];
    if (self) {
        // Initialization code
        
        self.userInteractionEnabled = YES;
        self.backgroundColor = [UIColor blackColor];
        photosArray = array;
        selectedIndex = sindex;
        shouldLoadOnlyURL = !isGallery;
        
        [self addGestureRecognizer];
        [self addScrollViewForPreviewClassified];
        [self addCloseBar];
        /*
         [[UIDevice currentDevice] beginGeneratingDeviceOrientationNotifications];
         [[NSNotificationCenter defaultCenter] addObserver: self selector:
         @selector(deviceOrientationDidChange:) name: UIDeviceOrientationDidChangeNotification object: nil];
         */
    }
    return self;
}



- (id)initWithFrame:(CGRect)frame photosArray:(NSArray*)array withSelectedIndex:(int)sindex{
    self = [super initWithFrame:frame];
    if (self) {
        // Initialization code
        
        self.userInteractionEnabled = YES;
        self.backgroundColor = [UIColor blackColor];
        photosArray = array;
        selectedIndex = sindex;
        
        [self addGestureRecognizer];
        [self addScrollView];
        [self addCloseBar];
        /*
        [[UIDevice currentDevice] beginGeneratingDeviceOrientationNotifications];
        [[NSNotificationCenter defaultCenter] addObserver: self selector:
         @selector(deviceOrientationDidChange:) name: UIDeviceOrientationDidChangeNotification object: nil];
         */
    }
    return self;
}




-(void)addGestureRecognizer{
    //Swipe
    //    UISwipeGestureRecognizer *swipeLeft = [[UISwipeGestureRecognizer alloc] initWithTarget:self action:@selector(handleSwipeLeft:)];
    //    UISwipeGestureRecognizer *swipeRight = [[UISwipeGestureRecognizer alloc] initWithTarget:self action:@selector(handleSwipeRight:)];
    //    swipeLeft.direction = UISwipeGestureRecognizerDirectionLeft;
    //    swipeRight.direction = UISwipeGestureRecognizerDirectionRight;
    //
    UITapGestureRecognizer *singleTap = [[UITapGestureRecognizer alloc] initWithTarget:self action:@selector(handleSingleTap:)];
    UITapGestureRecognizer *doubleTap = [[UITapGestureRecognizer alloc] initWithTarget:self action:@selector(handleDoubleTap:)];
    UITapGestureRecognizer *twoFingerTap = [[UITapGestureRecognizer alloc] initWithTarget:self action:@selector(handleTwoFingerTap:)];

    
    [singleTap setNumberOfTapsRequired:1];
    [singleTap requireGestureRecognizerToFail:doubleTap];
    
    [doubleTap setNumberOfTapsRequired:2];
    [twoFingerTap setNumberOfTouchesRequired:2];
    
    [self addGestureRecognizer:singleTap];
    
    
    //    [self.imageView addGestureRecognizer:doubleTap];
    //    [self.imageView addGestureRecognizer:twoFingerTap];
    //    [self.imageView addGestureRecognizer:swipeRight];
    //    [self.imageView addGestureRecognizer:swipeLeft];
}


#pragma mark Gesture Handling methods

- (void)handleSingleTap:(UIGestureRecognizer *)gestureRecognizer {
    //[self.xibImageDelegate imageClicked:imageName];
    barViewShowing = !barViewShowing;
    if (!barViewShowing) {
        [self hideClosebar];
    }else{
        [self showClosebar];
    }
}

-(void)handleSwipeLeft:(id)sender{
    
}

-(void)handleSwipeRight:(id)sender{
    
}

- (void)handleDoubleTap:(UIGestureRecognizer *)gestureRecognizer {
    
}

- (void)handleTwoFingerTap:(UIGestureRecognizer *)gestureRecognizer {
    
}

-(void)handlePan:(UIPanGestureRecognizer *)recognizer{
    
}

#pragma mark - GestureRecognizer Delegate
- (BOOL)gestureRecognizer:(UIGestureRecognizer *)gestureRecognizer shouldRecognizeSimultaneouslyWithGestureRecognizer:(UIGestureRecognizer *)otherGestureRecognizer {
    return YES;
}



/*
// Only override drawRect: if you perform custom drawing.
// An empty implementation adversely affects performance during animation.
- (void)drawRect:(CGRect)rect
{
    // Drawing code
}
*/

- (void)addCloseBar{
    barView = [[UIView alloc] initWithFrame:CGRectMake(0, 0, self.frame.size.width, 64.0f)];
    barView.backgroundColor = [UIColor sidraFlatTurquoiseColor];
    
    UIButton *menuButton = [UIButton buttonWithType:UIButtonTypeCustom];
    [menuButton setFrame:CGRectMake(barView.frame.size.width-50, 14.0f, 50.0f,50.0f)];
    [menuButton setImage:[UIImage imageNamed:@"photoViewerCloseButton.png"] forState:UIControlStateNormal];
    [menuButton addTarget:self
                   action:@selector(goBack)
         forControlEvents:UIControlEventTouchUpInside];
    [barView addSubview:menuButton];
    barViewShowing = NO;
    barView.alpha = 0.0f;
    
    [self addSubview:barView];
}
- (void)showClosebar{
    [UIView animateWithDuration:0.3 animations:^{
        barView.alpha = 1.0f;
    }];
    
}
- (void)hideClosebar{
    [UIView animateWithDuration:0.3 animations:^{
        barView.alpha = 0.0f;
    }];
    
}

- (void)goBack{
    photosArray = nil;
    [scrollView removeFromSuperview];
    scrollView = nil;
    [self.delegate closePhotoViewer];
}

- (void)addScrollView{
    
    CGRect selectedFrame = CGRectMake(0, 0, 0, 0);
    
    scrollView = [[UIScrollView alloc] initWithFrame:CGRectMake(0, 0, self.frame.size.width, self.frame.size.height)];
    scrollView.showsHorizontalScrollIndicator = NO;
    scrollView.showsVerticalScrollIndicator = NO;
    scrollView.pagingEnabled = YES;
    scrollView.delegate = self;
    scrollView.bounces = NO;
    
    for (int i=0; i<[photosArray count]; i++) {
        NSString *urlString = @"";
        int media_type = 1;
        if (shouldLoadOnlyURL) {
            urlString = [NSString stringWithFormat:@"%@",[photosArray objectAtIndex:i]];
            //XLog(@"%@",urlString);
            media_type = 1;
        }else{
            MediaItem *item = (MediaItem*)[photosArray objectAtIndex:i];
            urlString = [NSString stringWithFormat:@"%@",item.media];
            media_type = item.mediaType;
            
        }
        
        
        CGRect viewFrame;
        if (media_type == 2)
        {
            // Found movie
            UIView *movieView =[[UIView alloc] initWithFrame:CGRectMake(i*scrollView.frame.size.width,
                                                                        0.0f,
                                                                        scrollView.frame.size.width,
                                                                        scrollView.frame.size.height)];
            movieView.backgroundColor = [UIColor blackColor];
            UIImageView *videoView = [[UIImageView alloc] initWithImage:[UIImage imageNamed:@"PlayControl.png"]];
            videoView.center = CGPointMake(movieView.frame.size.width / 2, movieView.frame.size.height / 2);
            videoView.layer.cornerRadius = 2.5;
            videoView.autoresizingMask = ( UIViewAutoresizingFlexibleWidth | UIViewAutoresizingFlexibleHeight | UIViewAutoresizingFlexibleLeftMargin | UIViewAutoresizingFlexibleRightMargin);
            
            [movieView addSubview:videoView];
            videoView.userInteractionEnabled = YES;
            
            [scrollView addSubview:movieView];
            
            
            UIButton *button = [UIButton buttonWithType:UIButtonTypeCustom];
            [button setTag:i];
            [button addTarget:self
                       action:@selector(clickMovieButton:)
             forControlEvents:UIControlEventTouchUpInside];
            button.frame = CGRectMake(0, 0, movieView.frame.size.width, movieView.frame.size.height);
            [movieView addSubview:button];
            
            viewFrame = movieView.frame;
        
        } else {
            // ( or ) are present
            AsyncImageView *imageView = [[AsyncImageView alloc] initWithFrame:CGRectMake(i*scrollView.frame.size.width,
                                                                                         0.0f,
                                                                                         scrollView.frame.size.width,
                                                                                         scrollView.frame.size.height)];
            imageView.image = [UIImage imageNamed:@"PlaceHolderImg.png"];
            imageView.contentMode = kImageViewContentMode;
            imageView.clipsToBounds = YES;
            imageView.imageURL = [NSURL URLWithString:[[NSString stringWithFormat:@"%@/%@",SERVER_BASE_IMAGE_URL,urlString] stringByAddingPercentEscapesUsingEncoding:NSUTF8StringEncoding]];
            imageView.showActivityIndicator = YES;
            [scrollView addSubview:imageView];
            
            viewFrame = imageView.frame;
        }
        
        
        
        //XLog(@"%@",imageView.imageURL);
        if (i==selectedIndex) {
            selectedFrame = viewFrame;//imageView.frame;
        }
        
        scrollView.contentSize = CGSizeMake(scrollView.contentSize.width+viewFrame.size.width, scrollView.frame.size.height);
    }
    
    [self addSubview:scrollView];
    
    
    
    [scrollView scrollRectToVisible:selectedFrame animated:NO];
    
    
}


-(IBAction)clickMovieButton:(id)sender{
    [self.delegate openMovieView:[sender tag]];
}
#pragma for preview classifed
- (void)addScrollViewForPreviewClassified{
    
    CGRect selectedFrame = CGRectMake(0, 0, 0, 0);
    
    scrollView = [[UIScrollView alloc] initWithFrame:CGRectMake(0, 0, self.frame.size.width, self.frame.size.height)];
    scrollView.showsHorizontalScrollIndicator = NO;
    scrollView.showsVerticalScrollIndicator = NO;
    scrollView.pagingEnabled = YES;
    scrollView.delegate = self;
    scrollView.bounces = NO;
    
    for (int i=0; i<[photosArray count]; i++) {
        AsyncImageView *imageView = [[AsyncImageView alloc] initWithFrame:CGRectMake(i*scrollView.frame.size.width,
                                                                                     0.0f,
                                                                                     scrollView.frame.size.width,
                                                                                     scrollView.frame.size.height)];
        imageView.image = [photosArray objectAtIndex:i];//[UIImage imageNamed:@"PlaceHolderImg.png"];
        imageView.contentMode = kImageViewContentMode;
        imageView.clipsToBounds = YES;
        //imageView.imageURL = [NSURL URLWithString:[[NSString stringWithFormat:@"%@/%@",SERVER_BASE_IMAGE_URL,urlString] stringByAddingPercentEscapesUsingEncoding:NSUTF8StringEncoding]];
        imageView.showActivityIndicator = YES;
        [scrollView addSubview:imageView];
        //XLog(@"%@",imageView.imageURL);
        if (i==selectedIndex) {
            selectedFrame = imageView.frame;
        }
        
        scrollView.contentSize = CGSizeMake(scrollView.contentSize.width+imageView.frame.size.width, scrollView.frame.size.height);
    }
    
    [self addSubview:scrollView];
    
    
    
    [scrollView scrollRectToVisible:selectedFrame animated:NO];
    
    
}



#pragma mark - Device Orientation
- (void)deviceOrientationDidChange:(NSNotification *)notification {
    //Obtain current device orientation
    UIDeviceOrientation orientation = [[UIDevice currentDevice] orientation];
    if (UIDeviceOrientationIsLandscape(orientation)) {
    }
    //Do my thing
}

-(void) dealloc{
    [[NSNotificationCenter defaultCenter] removeObserver: self];
    [[UIDevice currentDevice] endGeneratingDeviceOrientationNotifications];
}


@end
