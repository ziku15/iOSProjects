
//
//  GalleryAlbumDetailsViewController.m
//  Pulse
//
//  Created by xibic on 6/25/14.
//  Copyright (c) 2014 Atomix. All rights reserved.
//

#import "GalleryAlbumDetailsViewController.h"
#import "SidraImageGallery.h"
#import "MediaItem.h"

static BOOL isVideoPlaying = NO;

@interface GalleryAlbumDetailsViewController ()<SidraImageGalleryDelegate,FullScreenPhotoViewerDelegate>{
    int pageNo;
    __block BOOL isLoading;
    
    SidraImageGallery *galleryView;
    
    NSArray *monthArray;
    NSMutableArray *photosArray;
    
    FullScreenPhotoViewer *fullScreenPhotoView;
    
    MPMoviePlayerController *moviePlayer;
    BOOL videoPlayBackFinished;
    
    
}
@property (weak, nonatomic) IBOutlet UILabel *createdDateLabel;
@property (weak, nonatomic) IBOutlet UILabel *numberOfItemsLabel;

@end

@implementation GalleryAlbumDetailsViewController

@synthesize albumItem;

- (id)initWithNibName:(NSString *)nibNameOrNil bundle:(NSBundle *)nibBundleOrNil
{
    self = [super initWithNibName:nibNameOrNil bundle:nibBundleOrNil];
    if (self) {
        // Custom initialization
        //self.view.backgroundColor = [UIColor whiteColor];
    }
    return self;
}

- (void)viewDidLoad
{
    [super viewDidLoad];
    // Do any additional setup after loading the view from its nib.
    [self setNavigationCustomTitleView:albumItem.catName with:@"Browsing Items in Collection"];
    monthArray = @[@"January",@"February",@"March",@"April",@"May",@"June",@"July",@"August",@"September",@"October",@"November",@"December"];
    
    galleryView = [[SidraImageGallery alloc] initWithFrame:CGRectMake(0, 60, SCREEN_SIZE.width, SCREEN_SIZE.height-60)];
    galleryView.delegate = self;
    [self.view addSubview:galleryView];
    
    videoPlayBackFinished = FALSE;
    
    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(playerStarted:) name:@"UIMoviePlayerControllerDidEnterFullscreenNotification" object:nil];
    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(playerWillExitFullscreen:) name:@"UIMoviePlayerControllerWillExitFullscreenNotification" object:nil];
    
    dispatch_queue_t backgroundQueue = dispatch_queue_create("Background Queue", NULL);
    dispatch_async(backgroundQueue, ^{
        //Clear bubble notification = 2 == Classified type
        [[ServerManager sharedManager] updateBubbleNotificationStatus:@"8" completion:^(BOOL success) {
            if (success) {
            }
        }];
    });
    
    
}

#pragma customize navigation bar


-(void)setNavigationCustomTitleView:(NSString *)titleText with:(NSString *)subtitleText{
    //First Remove previous view
    for (UIView *view in self.navigationItem.titleView.subviews) {
        [view removeFromSuperview];
    }
    
    
    //Create view and add to the title view
    UILabel *titleLabel = [[UILabel alloc] initWithFrame:CGRectMake(0, 15, 0, 0)];//CGRectMake(0, ([subtitleText isEqualToString:@""]?6:2), 0, 0)];
    titleLabel.backgroundColor = [UIColor clearColor];
    titleLabel.textColor = [UIColor whiteColor];
    titleLabel.font = [UIFont boldSystemFontOfSize:17];
    titleLabel.text = titleText;
    [titleLabel sizeToFit];
    
    UILabel *subTitleLabel = [[UILabel alloc] initWithFrame:CGRectMake(0, ([subtitleText isEqualToString:@""]?6:2), 0, 0)];
    subTitleLabel.backgroundColor = [UIColor clearColor];
    subTitleLabel.textColor = [UIColor whiteColor];
    subTitleLabel.font = [UIFont systemFontOfSize:11];
    subTitleLabel.text = subtitleText;
    [subTitleLabel sizeToFit];
    
    UIView *twoLineTitleView = [[UIView alloc] initWithFrame:CGRectMake(0, 0, MAX(subTitleLabel.frame.size.width, titleLabel.frame.size.width), 30)];
    [twoLineTitleView addSubview:titleLabel];
    [twoLineTitleView addSubview:subTitleLabel];
    
    float widthDiff = subTitleLabel.frame.size.width - titleLabel.frame.size.width;
    
    if (widthDiff > 0) {
        CGRect frame = titleLabel.frame;
        frame.origin.x = widthDiff / 2;
        titleLabel.frame = CGRectIntegral(frame);
    }else{
        CGRect frame = subTitleLabel.frame;
        frame.origin.x = abs(widthDiff) / 2;
        subTitleLabel.frame = CGRectIntegral(frame);
    }
    
    self.navigationItem.titleView = twoLineTitleView;
}



- (void)viewDidAppear:(BOOL)animated{
    [super viewDidAppear:animated];
    
    //NSLog(@"Album Category:%@",albumItem.catName);
    if (!videoPlayBackFinished) {
        NSString *dateStr = albumItem.createdDate;
        
        NSDateFormatter *df = [[NSDateFormatter alloc] init];
        [df setDateFormat:@"yyyy-MM-dd hh:mm:ss"];
        NSDate *myDate = [df dateFromString: dateStr];
        //XLog(@"%@",myDate);
        NSDateComponents *components = [[NSCalendar currentCalendar] components:NSDayCalendarUnit | NSMonthCalendarUnit | NSYearCalendarUnit fromDate:myDate];
        NSInteger day = [components day];
        NSInteger month = [components month];
        NSInteger year = [components year];
        self.createdDateLabel.text = [NSString stringWithFormat:@"Created on: %@ %i, %i",[monthArray objectAtIndex:month-1],day,year];
        [self.createdDateLabel setFont:[UIFont fontWithName:@"olaola" size:11]];
        self.numberOfItemsLabel.text = [NSString stringWithFormat:@"%d photos, %d videos",albumItem.photos,albumItem.videos];
        [self.numberOfItemsLabel setFont:[UIFont fontWithName:@"olaola" size:5]];
        isLoading = NO;
        pageNo = 1;
        [[ServerManager sharedManager] fetchGalleryAlbumImageList:[NSString stringWithFormat:@""] galleryID:[NSString stringWithFormat:@"%@",self.albumItem.itemID] scrollDirection:@"" completion:^(BOOL success, NSMutableArray *resultDataArray) {
            if (success) {
                pageNo++;
                photosArray = [NSMutableArray arrayWithArray:resultDataArray];
                [galleryView showGalleryImages:photosArray];
            }
            
        }];
    }
    
}

- (void)didReceiveMemoryWarning
{
    [super didReceiveMemoryWarning];
    // Dispose of any resources that can be recreated.
}

#pragma mark - SidraImageGallery Delegate
- (void)clickedItem:(int)index{
    MediaItem *item = (MediaItem *)[photosArray objectAtIndex:index];
    if (item.mediaType == 2) {
        [self showVideoScreenView:item];
    }else{
        [self showFullScreenView:index];
    }
}

#pragma mark - VideoView
- (void)showVideoScreenView:(MediaItem*)videoItem{

    videoPlayBackFinished = TRUE;
    
    NSString *urlString = [[NSString stringWithFormat:@"%@/%@",SERVER_BASE_IMAGE_URL,videoItem.media] stringByAddingPercentEscapesUsingEncoding:NSUTF8StringEncoding];
    //urlString = [NSString stringWithFormat:@"%@/%@",SERVER_BASE_IMAGE_URL,videoItem.media];
    XLog(@"Video URL: %@",urlString);
    //urlString = @"http://archive.org/download/WaltDisneyCartoons-MickeyMouseMinnieMouseDonaldDuckGoofyAndPluto/WaltDisneyCartoons-MickeyMouseMinnieMouseDonaldDuckGoofyAndPluto-HawaiianHoliday1937-Video.mp4";
    ///*
    moviePlayer=[[MPMoviePlayerController alloc] initWithContentURL:[NSURL URLWithString:urlString]];
    
    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(moviePlayBackDidFinish:) name:MPMoviePlayerPlaybackDidFinishNotification object:moviePlayer];
    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(moviePlayBackDonePressed:) name:MPMoviePlayerDidExitFullscreenNotification object:moviePlayer];
    //[[NSNotificationCenter defaultCenter] addObserver:self
    //                                         selector:@selector(MPMoviePlayerPlaybackStateDidChange:)
    //                                             name:MPMoviePlayerPlaybackStateDidChangeNotification
    //                                           object:moviePlayer];
    
    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(videoLoadStateChanged:) name:MPMoviePlayerLoadStateDidChangeNotification object:nil];
    
    MPMoviePlayerViewController *playerView = [[MPMoviePlayerViewController alloc]init];
    [moviePlayer setControlStyle:MPMovieControlStyleFullscreen];
    [playerView setView:moviePlayer.view];
    
    [moviePlayer.view setFrame: self.view.bounds];
    [self presentMoviePlayerViewControllerAnimated:playerView];
    moviePlayer.shouldAutoplay=YES;
    [moviePlayer play];
    
    //[XIBActivityIndicator startActivity];
    //[self playVideo:urlString];
    
}

/*
- (void)playVideo:(NSString*)aVideoUrl{
    // Initialize the movie player view controller with a video URL string
    MPMoviePlayerViewController *playerVC = [[MPMoviePlayerViewController alloc] initWithContentURL:[NSURL URLWithString:aVideoUrl]];
    
    // Remove the movie player view controller from the "playback did finish" notification observers
    [[NSNotificationCenter defaultCenter] removeObserver:playerVC
                                                    name:MPMoviePlayerPlaybackDidFinishNotification
                                                  object:playerVC.moviePlayer];
    
    // Register this class as an observer instead
    [[NSNotificationCenter defaultCenter] addObserver:self
                                             selector:@selector(movieFinishedCallback:)
                                                 name:MPMoviePlayerPlaybackDidFinishNotification
                                               object:playerVC.moviePlayer];
    
    // Set the modal transition style of your choice
    playerVC.modalTransitionStyle = UIModalTransitionStyleCrossDissolve;
    
    // Present the movie player view controller
    [self presentViewController:playerVC animated:YES completion:^{
        //
    }];
    
    // Start playback
    [playerVC.moviePlayer prepareToPlay];
    [playerVC.moviePlayer play];
}

- (void)movieFinishedCallback:(NSNotification*)aNotification{
    videoPlayBackFinished = FALSE;
    // Obtain the reason why the movie playback finished
    NSNumber *finishReason = [[aNotification userInfo] objectForKey:MPMoviePlayerPlaybackDidFinishReasonUserInfoKey];
    
    // Dismiss the view controller ONLY when the reason is not "playback ended"
    if ([finishReason intValue] != MPMovieFinishReasonPlaybackEnded)
    {
        MPMoviePlayerController *moviePlayer = [aNotification object];
        
        // Remove this class from the observers
        [[NSNotificationCenter defaultCenter] removeObserver:self
                                                        name:MPMoviePlayerPlaybackDidFinishNotification
                                                      object:moviePlayer];
        
        // Dismiss the view controller
        [self dismissViewControllerAnimated:YES completion:^{
            //
        }];
    }
}
*/

//

- (void)videoLoadStateChanged:(NSNotification *)note {
    switch (moviePlayer.loadState) {
        case MPMovieLoadStatePlayable:
            [XIBActivityIndicator dismissActivity];
            [[NSNotificationCenter defaultCenter] removeObserver:self name:MPMoviePlayerLoadStateDidChangeNotification object:nil];
        default:
            break;
    }
}

- (void)MPMoviePlayerPlaybackStateDidChange:(NSNotification *)notification{
    if (moviePlayer.playbackState == MPMoviePlaybackStatePlaying)
    { //playing
        [XIBActivityIndicator dismissActivity];
    }
    if (moviePlayer.playbackState == MPMoviePlaybackStateStopped)
    { //stopped
    }if (moviePlayer.playbackState == MPMoviePlaybackStatePaused)
    { //paused
    }if (moviePlayer.playbackState == MPMoviePlaybackStateInterrupted)
    { //interrupted
    }if (moviePlayer.playbackState == MPMoviePlaybackStateSeekingForward)
    { //seeking forward
    }if (moviePlayer.playbackState == MPMoviePlaybackStateSeekingBackward)
    { //seeking backward
    }
    
}

- (void) moviePlayBackDonePressed:(NSNotification*)notification{
    [moviePlayer stop];
    
    [self dismissViewControllerAnimated:YES completion:^{
        [[NSNotificationCenter defaultCenter] removeObserver:self name:MPMoviePlayerDidExitFullscreenNotification object:moviePlayer];
        
        if ([moviePlayer respondsToSelector:@selector(setFullscreen:animated:)]){
            [moviePlayer.view removeFromSuperview];
        }
        videoPlayBackFinished = FALSE;
        moviePlayer=nil;
    }];
    [XIBActivityIndicator dismissActivity];
}

- (void) moviePlayBackDidFinish:(NSNotification*)notification{
    [moviePlayer stop];
    
    [self dismissViewControllerAnimated:YES completion:^{
        [[NSNotificationCenter defaultCenter] removeObserver:self name:MPMoviePlayerDidExitFullscreenNotification object:moviePlayer];
        
        if ([moviePlayer respondsToSelector:@selector(setFullscreen:animated:)]){
            [moviePlayer.view removeFromSuperview];
        }
        videoPlayBackFinished = FALSE;
        moviePlayer=nil;
    }];

    [XIBActivityIndicator dismissActivity];
}
//

#pragma mark - FullScreenView
- (void)showFullScreenView:(int)index{
    //MediaItem *item = (MediaItem*)[photosArray objectAtIndex:index];
    //NSLog(@"SHow full view - %@",item.itemID);
    //[self.navigationController setNavigationBarHidden:YES animated:YES];
    [[AppManager sharedManager] hideNavigationBar];
    fullScreenPhotoView = [[FullScreenPhotoViewer alloc] initWithFrame:CGRectMake(0, 0, SCREEN_SIZE.width, SCREEN_SIZE.height) photosArray:photosArray withSelectedIndex:index];
    fullScreenPhotoView.delegate = self;
    [UIView animateWithDuration:0.5 animations:^{
        [self.view addSubview:fullScreenPhotoView];
    }];
    
}

- (void)closePhotoViewer{
    [[AppManager sharedManager] showNavigationBar];
    [UIView animateWithDuration:0.5 animations:^{
        [fullScreenPhotoView removeFromSuperview];
    }];
}

- (void)loadNewSetOfImages{
    if (!isLoading) {
        isLoading = YES;
        if(photosArray.count>0){
        MediaItem *item = (MediaItem*)[photosArray objectAtIndex:0];
        [[ServerManager sharedManager] fetchGalleryAlbumImageList:[NSString stringWithFormat:@"%@",item.itemID] galleryID:self.albumItem.itemID scrollDirection:@"0" completion:^(BOOL success, NSMutableArray *resultDataArray) {
            
            dispatch_async(dispatch_get_main_queue(), ^{
                [self dismisssView];
                  self.numberOfItemsLabel.text = [NSString stringWithFormat:@"%d photos, %d videos",albumItem.photos+resultDataArray.count,albumItem.videos];
            });
            
            if (success) {
                //NSLog(@"%@",resultDataArray);
                if ([resultDataArray count]>0) {
                   // [resultDataArray addObjectsFromArray:photosArray];
                   
                  //  photosArray=resultDataArray;
                    [galleryView addGalleryImages_Infront:resultDataArray];
                    isLoading = NO;
                }else{
                    isLoading = NO;
                }
            }else{
                isLoading = NO;
            }
            
        }];
        }
    }
    else
    {
        [self dismisssView];
    }
    
   
}

- (void)loadNextSetOfImages{
    if (!isLoading) {
        isLoading = YES;
        MediaItem *item = (MediaItem*)[photosArray objectAtIndex:photosArray.count-1];
        [[ServerManager sharedManager] fetchGalleryAlbumImageList:[NSString stringWithFormat:@"%@",item.itemID] galleryID:self.albumItem.itemID scrollDirection:@"1" completion:^(BOOL success, NSMutableArray *resultDataArray) {
            
            dispatch_async(dispatch_get_main_queue(), ^{
                [self dismisssView];
                  self.numberOfItemsLabel.text = [NSString stringWithFormat:@"%d photos, %d videos",albumItem.photos,albumItem.videos];
            });
            
            if (success) {
                //NSLog(@"%@",resultDataArray);
                if ([resultDataArray count]>0) {
                    [photosArray addObjectsFromArray:resultDataArray];
                    [galleryView addGalleryImages:resultDataArray];
                    isLoading = NO;
                }else{
                    isLoading = NO;
                }
            }else{
                isLoading = NO;
            }
            
        }];
    }
}


-(void)imageLoadingPullUpView{
    [super loadingPullUpView];
    CGRect frame = CGRectMake(0, SCREEN_SIZE.height-40.0f, SCREEN_SIZE.width, 40.0f);
    loadingView.frame = frame;
    loadingView.alpha = 1.0f;
    [loadingView apeareLoadingView];
}

-(void) imageLoadingPullDownView{
    [super loadingPullDownView];
    CGRect frame = CGRectMake(0, 63.0f+60, SCREEN_SIZE.width, 40.0f);
    loadingView.frame = frame;
    loadingView.alpha = 1.0f;
    [loadingView apeareLoadingView];
    
}

-(void) dismisssView{

    [loadingView dismisssView];
}


#pragma mark -

-(void)playerStarted:(NSNotification *)notification{
    isVideoPlaying = YES;
}
-(void)playerWillExitFullscreen:(NSNotification *)notification {
    isVideoPlaying = NO;
    [self dismissViewControllerAnimated:YES completion:^{
        //
    }];
}




@end
